@page "/staff/orderCoffee";
@namespace CourseWorkAppDev1.Pages.staff
@using CourseWorkAppDev1.Modules.Coffee.model;
@using CourseWorkAppDev1.Modules.Admin.model;
@using CourseWorkAppDev1.Modules.Admin.service;
@using CourseWorkAppDev1.Utils.HelperServices;
@using CourseWorkAppDev1.Modules.Coffee.service;
@using CourseWorkAppDev1.Pages.coffee;
@using CourseWorkAppDev1.Pages.admin;
@using CourseWorkAppDev1.Utils.Model;
@using System.Diagnostics
@using CourseWorkAppDev1.Modules.Staff.service;
@inject AdminService adminService;
@inject NotificationService notificationService;
@inject SessionService sessionService;
@inject CoffeeService coffeeService;
@inject ActionService actionService;
@inject StaffService staffService;
<br />
<br />
<div class="input-group mb-3">

    <div><input type="text" class="form-control" placeholder="Aa..." aria-label="Search" aria-describedby="search-button"></div>

    <div class="input-group-append">
        <button class="btn btn-outline-primary" type="button" id="search-button">Search</button>

    </div>
</div>
<h3>TODAY's MENU</h3>
<table>
    <thead>
        <tr>
            <th>Name</th>
            <th>CoffeeType</th>
            <th>Price</th>
            <th>Action</th>
        </tr>
    </thead>
    <tbody>
        @if (coffeeList != null && coffeeList.Count > 0)
        {
            @foreach (var coffee in coffeeList)
            {
                <tr>
                    <td>@coffee.Name</td>
                    <td>@coffee.CoffeeType</td>
                    <td>@coffee.Price</td>
                    <td>
                        <button @onclick="()=>AddToCart(coffee)" class="edit-button">ORDER</button>
                    </td>
                </tr>
            }
        }
    </tbody>
</table>
<h3>Order Cart</h3>
<p class="@messageClass">@this.message</p>
<table>
    <thead>
        <tr>
            <th>Name</th>
            <th>CoffeeType</th>
            <th>Price</th>
            <th>Add-ins</th>
            <th>Action</th>
        </tr>
    </thead>
    <tbody>
        @if (orderList != null && orderList.Count > 0)
        {
            for (int i = 0; i < orderList.Count; i++)
            {
                var orderedCoffee = orderList[i];
                <tr>
                    <td>@orderedCoffee.Name</td>
                    <td>@orderedCoffee.CoffeeType</td>
                    <td>@orderedCoffee.Price</td>
                    @if (orderedCoffee.AddIns != null && orderedCoffee.AddIns.Count > 0)
                    {
                        <td>
                            @foreach (var addin in orderedCoffee.AddIns)
                            {
                                @addin.Name

                                <br />
                            }
                        </td>
                    }
                    else
                    {
                        <td>
                            No Add-ins
                        </td>
                    }
                    <td>
                        <button type="button" class="btn btn-primary" @onclick="OpenAddModal">Add Addings</button>
                        <button @onclick="()=>RemoveFromCart(orderedCoffee)" class="delete-button">Discard</button>
                        @if (showAddModal)
                        {
                            <div class="modal" tabindex="-1" role="dialog" style="display:block;">
                                <div class="modal-dialog" role="document">
                                    <div class="modal-content">
                                        <div class="modal-header">
                                            <h5 class="modal-title">Add Add-ins</h5>
                                        </div>
                                        <div class="modal-body">
                                            <table>
                                                <thead>
                                                    <tr>
                                                        <th>Name</th>
                                                        <th>Price</th>
                                                        <th>Action</th>
                                                    </tr>
                                                </thead>
                                                <tbody>
                                                    @if (addingLists != null && addingLists.Count > 0)
                                                    {
                                                        for (int j = 0; j < addingLists.Count; j++)
                                                        {
                                                            var addins = addingLists[j];
                                                            <tr>
                                                                <td>@addins.Name</td>
                                                                <td>@addins.Price</td>
                                                                <td><button @onclick="()=>AddAddings(addins,orderedCoffee)" class="btn btn-secondary">Add</button></td>
                                                            </tr>
                                                        }
                                                    }
                                                </tbody>
                                            </table>
                                        </div>
                                        <div class="modal-footer">
                                            <button type="button" class="btn btn-secondary" @onclick="CloseModal">Close</button>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        }
                    </td>
                </tr>
            }
        }
        <p style="text-align: center;">Total price: @CalculateTotalPrice(free)</p>
    </tbody>
</table>
@if (!isMember)
{
    <button @onclick="OpenMemberModel" class="btn btn-primary" >Verify Membership</button>
}
@if (isMember)
{
    <button @onclick="Order" class="edit-button">Order Coffee</button>
}
@if (showMemberModel)
{
    <!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
        <style>
            /* Add any custom styles here */
        </style>
        <title>Your Page Title</title>
    </head>
    <body>

        <div class="modal mt-5" tabindex="-1" role="dialog" style="display: block;">
            <div class="modal-dialog" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Member Verification</h5>
                    </div>
                    <div class="modal-body">
                        <input type="email" class="form-control" @bind="CustomerModel.Email" placeholder="Enter email" />
                        <div style="display: flex; justify-content: center; margin-top: 20px;">
                            <button type="button" class="btn btn-success" @onclick="()=>CheckUserExist(CustomerModel)">Verify</button>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-danger" @onclick="CloseModal">Close</button>
                    </div>
                </div>
            </div>
        </div>

        <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
        <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.16.0/umd/popper.min.js"></script>
        <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
    </body>
    </html>

}

@code {
    string message = "";
    bool isRegularCustomer = false;

    bool checkEligable = false;
    decimal discount = 0;
    bool isDiscount = false;
    bool free = false;
    string messageClass = "";
    List<CommonModel>? coffeeList = new List<CommonModel>();
    bool showMemberModel = false;
    bool showAddModal = false;
    bool isMember = false;
    string email = "";
    List<CommonModel> orderList = new List<CommonModel>();
    List<CommonModel>? addingLists = new List<CommonModel>();
    UserModel CustomerModel = new UserModel();
    protected async override void OnInitialized()
    {
        notificationService.Clear();
    }
    protected async override Task OnParametersSetAsync()
    {
        coffeeList = await coffeeService.getList("coffee.json");
        orderList = await staffService.getOrderedCoffee();
        addingLists = await coffeeService.getList("addins.json");
        Trace.WriteLine("This is Addings count: " + addingLists.Count);
    }

    protected async void AddToCart(CommonModel coffee)
    {
        Trace.WriteLine("AddToCart");
        var coffeeCopy = new CommonModel
            {
                Name = coffee.Name,
                CoffeeType = coffee.CoffeeType,
                Price = coffee.Price,
                index = orderList.Count
            };
        Trace.WriteLine("This is index: " + coffeeCopy.index);
        staffService.setOrderedList(coffeeCopy);
        orderList = await staffService.getOrderedCoffee();
        foreach (var item in orderList)
        {
            Trace.WriteLine(item.Name);
        }
    }
    public decimal CalculateTotalPrice(bool free)
    {
        decimal totalPrice = 0;
        if (free)
        {
            return totalPrice;
        }
        foreach (var coffee in orderList)
        {
            totalPrice += coffee.Price;

            if (coffee.AddIns != null)
            {
                foreach (var addin in coffee.AddIns)
                {
                    totalPrice += addin.Price;
                }
            }
        }
        Trace.WriteLine("This is discount in CalculatePrice: " + discount);
        totalPrice = totalPrice - (totalPrice * discount / 100);
        return totalPrice;
    }
    protected async void RemoveFromCart(CommonModel orderedCoffee)
    {
        orderList = await staffService.removeOrderList(orderedCoffee.index);
    }

    protected void AddAddings(CommonModel addings, CommonModel coffee)
    {
        Trace.WriteLine("AddAddings: " + addings.index);
        orderList[coffee.index].AddIns.Add(addings);
        foreach (var item in orderList[coffee.index].AddIns)
        {
            Trace.WriteLine("This is Item: " + item);
        }
        CloseModal();
    }
    protected async void CheckUserExist(UserModel user)
    {
        CloseModal();
        Trace.WriteLine("This isEmail: " + user.Email);
        var result = await staffService.isUserRegistered(user.Email);
        if (result.Success)
        {
            Trace.WriteLine("Found");
            free = await staffService.getIsFree(user.Email);
            Trace.WriteLine("This is free: " + free);
            checkEligable = await staffService.IsEligibleForDiscount(user.Email);
            Trace.WriteLine("Is user eligible for discount: " + isRegularCustomer);
            if (checkEligable)
            {
                Trace.WriteLine("Yes User is: ");
                this.discount = 10;
            }
            if (!checkEligable)
            {
                isRegularCustomer = await staffService.IsRegularCustomer(user.Email);
            }
            if (isRegularCustomer)
            {
                Trace.WriteLine("Yes User is");
                this.discount = 10;
            }
            Trace.WriteLine("This is discount in Razor: " + isRegularCustomer);
            Trace.WriteLine("This is discount in Razor: " + free);
            decimal totalPrice = this.CalculateTotalPrice(free);
            isMember = true;
            email = user.Email;
            this.message = result.Message;
            this.messageClass = "success-message";
            if (this.discount > 0)
            {
                this.message = "Discounted Coffee For you for entire 1 month";
                this.messageClass = "success-message";
            }
            if (free)
            {
                this.message = "Free Coffee For you";
                this.messageClass = "success-message";
            }
        }
        else
        {
            this.message = result.Message;
            this.messageClass = "fail-message";

        }
        StateHasChanged();
    }
    protected async void Order()
    {
        Trace.WriteLine("This is Discoint: " + discount);
        decimal totalPrice = this.CalculateTotalPrice(free);
        await staffService.TakeOrder(orderList, email, totalPrice, free);
        await staffService.clearOrderList();
        isMember = false;
        discount = 0;
        message = "Order Placed Successfully";
        StateHasChanged();
    }

    public void OpenAddModal()
    {
        showAddModal = true;
    }
    public void OpenMemberModel()
    {
        showMemberModel = true;
    }
    public void CloseModal()
    {
        showAddModal = false;
        showMemberModel = false;
    }
}

<script>
    document.getElementById('search-button').addEventListener('click', function () {
        var searchValue = document.querySelector('.form-control').value.toLowerCase();
        var rows = document.querySelectorAll('tbody tr');

        rows.forEach(function (row) {
            var data = row.innerText.toLowerCase();
            if (data.indexOf(searchValue) !== -1) {
                row.style.display = 'table-row';
            } else {
                row.style.display = 'none';
            }
        });
    });
</script>
